- state: 'start'
  actions:
    - input: 'openbrace'
      command: 'OpenBrace'
      state: 'newline'
    - input: 'closebrace'
      command: 'CloseBrace'
      state: 'newline'
    - input: 'semicolon'
      command: 'Semicolon'
      state: 'newline'
    - input: 'char'
      command: 'Lexeme'
      state: 'char'
    - input: 'spaces'
      command: 'Ignore'
      state: 'start'
    - input: 'space'
      command: 'Ignore'
      state: 'start'
    - input: 'slashr'
      command: 'Ignore'
      state: 'start'
    - input: 'openbracket'
      command: 'Lexeme'
      state: 'openbracket'
    - input: 'closebracket'
      command: 'Lexeme'
      state: 'space'
    - input: 'closemultilinecomment'
      command: 'Lexeme'
      state: 'newline'
    - input: 'newline'
      command: 'NewLine'
      state: 'truenewline'
    - input: 'for'
      command: 'Lexeme'
      state: 'for'
    - input: 'onelinecomment'
      command: 'Lexeme'
      state: 'onelinecomment'
    - input: 'openmultilinecomment'
      command: 'Lexeme'
      state: 'multilinecomment'
    - input: 'quotemark'
      command: 'Lexeme'
      state: 'quotemark'

- state: 'char'
  actions:
    - input: 'openbrace'
      command: 'OpenBraceWithSpace'
      state: 'newline'
    - input: 'closebrace'
      command: 'CloseBraceOnNewLine'
      state: 'newline'
    - input: 'semicolon'
      command: 'Semicolon'
      state: 'newline'
    - input: 'char'
      command: 'Lexeme'
      state: 'char'
    - input: 'spaces'
      command: 'Ignore'
      state: 'space'
    - input: 'space'
      command: 'Ignore'
      state: 'space'
    - input: 'slashr'
      command: 'Ignore'
      state: 'space'
    - input: 'openbracket'
      command: 'LexemeWithSpace'
      state: 'openbracket'
    - input: 'closebracket'
      command: 'Lexeme'
      state: 'char'
    - input: 'closemultilinecomment'
      command: 'Lexeme'
      state: 'newline'
    - input: 'newline'
      command: 'Ignore'
      state: 'space'
    - input: 'for'
      command: 'LexemeWithSpace'
      state: 'for'
    - input: 'onelinecomment'
      command: 'Lexeme'
      state: 'onelinecomment'
    - input: 'openmultilinecomment'
      command: 'Lexeme'
      state: 'multilinecomment'
    - input: 'quotemark'
      command: 'Lexeme'
      state: 'quotemark'

- state: 'openbracket'
  actions:
    - input: 'openbrace'
      command: 'OpenBraceWithSpace'
      state: 'newline'
    - input: 'closebrace'
      command: 'CloseBraceOnNewLine'
      state: 'newline'
    - input: 'semicolon'
      command: 'Semicolon'
      state: 'newline'
    - input: 'char'
      command: 'Lexeme'
      state: 'char'
    - input: 'spaces'
      command: 'Ignore'
      state: 'openbracket'
    - input: 'space'
      command: 'Ignore'
      state: 'openbracket'
    - input: 'slashr'
      command: 'Ignore'
      state: 'openbracket'
    - input: 'openbracket'
      command: 'Lexeme'
      state: 'openbracket'
    - input: 'closebracket'
      command: 'Lexeme'
      state: 'space'
    - input: 'closemultilinecomment'
      command: 'Lexeme'
      state: 'newline'
    - input: 'newline'
      command: 'Ignore'
      state: 'openbracket'
    - input: 'for'
      command: 'LexemeWithSpace'
      state: 'for'
    - input: 'onelinecomment'
      command: 'Lexeme'
      state: 'onelinecomment'
    - input: 'openmultilinecomment'
      command: 'Lexeme'
      state: 'multilinecomment'
    - input: 'quotemark'
      command: 'Lexeme'
      state: 'quotemark'

- state: 'space'
  actions:
    - input: 'openbrace'
      command: 'OpenBraceWithSpace'
      state: 'newline'
    - input: 'closebrace'
      command: 'CloseBraceOnNewLine'
      state: 'newline'
    - input: 'semicolon'
      command: 'Semicolon'
      state: 'newline'
    - input: 'char'
      command: 'LexemeWithSpace'
      state: 'char'
    - input: 'spaces'
      command: 'Ignore'
      state: 'space'
    - input: 'space'
      command: 'Ignore'
      state: 'space'
    - input: 'slashr'
      command: 'Ignore'
      state: 'space'
    - input: 'openbracket'
      command: 'LexemeWithSpace'
      state: 'openbracket'
    - input: 'closebracket'
      command: 'Lexeme'
      state: 'space'
    - input: 'closemultilinecomment'
      command: 'Lexeme'
      state: 'newline'
    - input: 'newline'
      command: 'Ignore'
      state: 'space'
    - input: 'for'
      command: 'LexemeWithSpace'
      state: 'for'
    - input: 'onelinecomment'
      command: 'LexemeWithSpace'
      state: 'onelinecomment'
    - input: 'openmultilinecomment'
      command: 'LexemeWithSpace'
      state: 'multilinecomment'
    - input: 'quotemark'
      command: 'LexemeWithSpace'
      state: 'quotemark'

- state: 'newline'
  actions:
    - input: 'openbrace'
      command: 'OpenBraceOnNewLine'
      state: 'newline'
    - input: 'closebrace'
      command: 'CloseBraceOnNewLine'
      state: 'newline'
    - input: 'semicolon'
      command: 'Semicolon'
      state: 'newline'
    - input: 'char'
      command: 'LexemeOnNewLine'
      state: 'char'
    - input: 'spaces'
      command: 'Ignore'
      state: 'newline'
    - input: 'space'
      command: 'Ignore'
      state: 'newline'
    - input: 'slashr'
      command: 'Ignore'
      state: 'newline'
    - input: 'openbracket'
      command: 'LexemeOnNewLine'
      state: 'openbracket'
    - input: 'closebracket'
      command: 'LexemeOnNewLine'
      state: 'space'
    - input: 'closemultilinecomment'
      command: 'Lexeme'
      state: 'newline'
    - input: 'newline'
      command: 'Ignore'
      state: 'truenewline'
    - input: 'for'
      command: 'LexemeOnNewLine'
      state: 'for'
    - input: 'onelinecomment'
      command: 'Lexeme'
      state: 'onelinecomment'
    - input: 'openmultilinecomment'
      command: 'Lexeme'
      state: 'multilinecomment'
    - input: 'quotemark'
      command: 'LexemeOnNewLine'
      state: 'quotemark'

- state: 'truenewline'
  actions:
    - input: 'openbrace'
      command: 'OpenBraceOnNewLine'
      state: 'newline'
    - input: 'closebrace'
      command: 'CloseBraceOnNewLine'
      state: 'newline'
    - input: 'semicolon'
      command: 'Semicolon'
      state: 'newline'
    - input: 'char'
      command: 'LexemeOnNewLine'
      state: 'char'
    - input: 'spaces'
      command: 'Ignore'
      state: 'truenewline'
    - input: 'space'
      command: 'Ignore'
      state: 'truenewline'
    - input: 'slashr'
      command: 'Ignore'
      state: 'truenewline'
    - input: 'openbracket'
      command: 'LexemeOnNewLine'
      state: 'openbracket'
    - input: 'closebracket'
      command: 'LexemeOnNewLine'
      state: 'space'
    - input: 'closemultilinecomment'
      command: 'LexemeOnNewLine'
      state: 'newline'
    - input: 'newline'
      command: 'NewLine'
      state: 'secondnewline'
    - input: 'for'
      command: 'LexemeOnNewLine'
      state: 'for'
    - input: 'onelinecomment'
      command: 'LexemeOnNewLine'
      state: 'onelinecomment'
    - input: 'openmultilinecomment'
      command: 'LexemeOnNewLine'
      state: 'multilinecomment'
    - input: 'quotemark'
      command: 'LexemeOnNewLine'
      state: 'quotemark'

- state: 'secondnewline'
  actions:
    - input: 'openbrace'
      command: 'OpenBraceOnNewLine'
      state: 'newline'
    - input: 'closebrace'
      command: 'CloseBraceOnNewLine'
      state: 'newline'
    - input: 'semicolon'
      command: 'Semicolon'
      state: 'newline'
    - input: 'char'
      command: 'LexemeOnNewLine'
      state: 'char'
    - input: 'spaces'
      command: 'Ignore'
      state: 'secondnewline'
    - input: 'space'
      command: 'Ignore'
      state: 'secondnewline'
    - input: 'slashr'
      command: 'Ignore'
      state: 'secondnewline'
    - input: 'openbracket'
      command: 'LexemeOnNewLine'
      state: 'openbracket'
    - input: 'closebracket'
      command: 'LexemeOnNewLine'
      state: 'space'
    - input: 'closemultilinecomment'
      command: 'LexemeOnNewLine'
      state: 'newline'
    - input: 'newline'
      command: 'Ignore'
      state: 'secondnewline'
    - input: 'for'
      command: 'LexemeOnNewLine'
      state: 'for'
    - input: 'onelinecomment'
      command: 'LexemeOnNewLine'
      state: 'onelinecomment'
    - input: 'openmultilinecomment'
      command: 'LexemeOnNewLine'
      state: 'multilinecomment'
    - input: 'quotemark'
      command: 'LexemeOnNewLine'
      state: 'quotemark'

- state: 'for'
  actions:
    - input: 'openbrace'
      command: 'OpenBraceWithSpace'
      state: 'newline'
    - input: 'closebrace'
      command: 'CloseBraceOnNewLine'
      state: 'newline'
    - input: 'semicolon'
      command: 'Semicolon'
      state: 'newline'
    - input: 'char'
      command: 'LexemeWithSpace'
      state: 'char'
    - input: 'spaces'
      command: 'Ignore'
      state: 'space'
    - input: 'space'
      command: 'Ignore'
      state: 'space'
    - input: 'slashr'
      command: 'Ignore'
      state: 'space'
    - input: 'openbracket'
      command: 'LexemeWithSpace'
      state: 'openbracket'
    - input: 'closebracket'
      command: 'LexemeWithSpace'
      state: 'space'
    - input: 'closemultilinecomment'
      command: 'Lexeme'
      state: 'newline'
    - input: 'newline'
      command: 'Ignore'
      state: 'space'
    - input: 'for'
      command: 'LexemeWithSpace'
      state: 'for'
    - input: 'onelinecomment'
      command: 'LexemeWithSpace'
      state: 'onelinecomment'
    - input: 'openmultilinecomment'
      command: 'LexemeWithSpace'
      state: 'multilinecomment'
    - input: 'quotemark'
      command: 'LexemeWithSpace'
      state: 'quotemark'

- state: 'onelinecomment'
  actions:
    - input: null
      command: 'Lexeme'
      state: 'onelinecomment'
    - input: 'newline'
      command: 'Ignore'
      state: 'truenewline'

- state: 'multilinecomment'
  actions:
    - input: null
      command: 'Lexeme'
      state: 'multilinecomment'
    - input: 'newline'
      command: 'NewLine'
      state: 'multilinecomment'
    - input: 'closemultilinecomment'
      command: 'Lexeme'
      state: 'newline'

- state: 'quotemark'
  actions:
    - input: null
      command: 'Lexeme'
      state: 'quotemark'
    - input: 'newline'
      command: 'Ignore'
      state: 'truenewline'
    - input: 'quotemark'
      command: 'Lexeme'
      state: 'char'
